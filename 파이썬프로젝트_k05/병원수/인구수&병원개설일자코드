# k05_프로젝트_병원 수 / 인구 수 구하기
# 그래프가 높을 수록 인구 수 대비 병원 밀집도가 높으니까 의료 접근성이 좋을 가능성이 크다
import pandas as pd
import matplotlib.pyplot as plt

# 한글 → 영어 매핑
province_mapping = {
    "서울": "Seoul", "부산": "Busan", "대구": "Daegu", "인천": "Incheon",
    "광주": "Gwangju", "대전": "Daejeon", "울산": "Ulsan", "세종시": "Sejong",
    "경기": "Gyeonggi", "강원": "Gangwon", "충북": "Chungbuk", "충남": "Chungnam",
    "전북": "Jeonbuk", "전남": "Jeonnam", "경북": "Gyeongbuk", "경남": "Gyeongnam", "제주": "Jeju"
}

# 병원 정보 데이터 읽기
def addProvince(file_path):
    df_hospital = pd.read_csv(file_path, encoding="cp949")

    # '시도코드명' 열 기준으로 병원 수 집계
    province_count = df_hospital['시도코드명'].value_counts().to_dict()

    return province_count # 데이터 리턴

# 인구 데이터 읽기 (빈 값 처리 및 pandas 사용)
def addPopulation(file_path):
    df_population = pd.read_csv(file_path, encoding="cp949")

    # 열 이름의 공백을 제거
    df_population.columns = df_population.columns.str.strip()

    # '총인구수' 열에서 쉼표를 제거하고 숫자로 변환
    df_population['총인구수'] = df_population['총인구수'].str.replace(",", "").astype(float)

    # '행정구역'과 '총인구수'만 추출해서 딕셔너리로 변환
    population_data = pd.Series(df_population['총인구수'].values, index=df_population['행정구역']).to_dict()

    return population_data # 데이터 리턴

# 병원 수와 인구 수 데이터를 사용할 계산 함수 정의
def calHospital(hospitalData, populationData):
  # 병원 수와 인구 수 비율 계산
    result = []
    for province, hospital_count in hospitalData.items():
        population = populationData.get(province, None)
        if population:  # 인구 데이터가 있다면
            ratio = hospital_count / population # 병원 수 / 인구 수 계산 => ratio 변수에 저장
            result.append((province, ratio)) # 결과 리스트에 추가
    return result

# 함수들을 사용해 데이터 가공 및 전처리
def dataProcess(file_path_hospital, file_path_population, year):
    hospitalData = addProvince(file_path_hospital) # 병원 데이터 addProvince함수로 읽어오기
    populationData = addPopulation(file_path_population) # 인구 데이터 addPopulation 함수로 읽어오기
    hospitalTot = calHospital(hospitalData, populationData) # 위의 calHospital 계산 함수 불러와 최종 계산
    return hospitalTot

# 데이터를 pandas DataFrame으로 변환하는 함수
def getHospitalData(file_path_hospital, file_path_population, year):
    hospitalTot = dataProcess(file_path_hospital, file_path_population, year)
    df = pd.DataFrame(hospitalTot, columns=['Province', f'Ratio_{year}']) # pd(pandas) 사용
    # 한글 → 영어로 변환
    df['Province'] = df['Province'].map(province_mapping) # 매핑
    return df

# 2021, 2022, 2023년 데이터 처리
df_2021 = getHospitalData("/content/1. 병원정보서비스 2021.12.csv", "/content/2021_수정_주민등록인구및세대현황_월간.csv", 2021)
df_2022 = getHospitalData("/content/1.병원정보서비스 2022.12.csv", "/content/2022_수정_주민등록인구및세대현황_월간.csv", 2022)
df_2023 = getHospitalData("/content/1.병원정보서비스.csv", "/content/2023_수정_주민등록인구및세대현황_월간.csv", 2023)

# 병원 비율 데이터를 세로로 정렬하고, 세 개의 연도 데이터 합침
df_2021 = df_2021.set_index('Province').sort_index()
df_2022 = df_2022.set_index('Province').sort_index()
df_2023 = df_2023.set_index('Province').sort_index()

# -- 여기서부터 그래프 코드
fig, ax = plt.subplots(3, 1, figsize=(14, 20))  # 그래프 크기 확장

# x축 레이블 간 간격 설정 함수
def adjust_xticks(ax, step=2):
    ax.set_xticks(ax.get_xticks()[::step])  # 간격 조정 (2 간격으로 레이블 표시)
    ax.set_xticklabels(ax.get_xticklabels(), fontsize=10)  # 글자 크기 조정

# 2021년 그래프
df_2021.plot(kind='bar', y=f'Ratio_2021', ax=ax[0], color='skyblue', legend=False)
ax[0].set_title("2021 hospital / population", fontsize=14)
ax[0].set_xlabel("Province", fontsize=12)
ax[0].set_ylabel("Hospital to Population Ratio", fontsize=12)
ax[0].tick_params(axis='x', rotation=0)  # x축 레이블 가로 설정
adjust_xticks(ax[0], step=1)  # x축 레이블 간격 조정

# 2022년 그래프
df_2022.plot(kind='bar', y=f'Ratio_2022', ax=ax[1], color='lightgreen', legend=False)
ax[1].set_title("2022 hospital / population", fontsize=14)
ax[1].set_xlabel("Province", fontsize=12)
ax[1].set_ylabel("Hospital to Population Ratio", fontsize=12)
ax[1].tick_params(axis='x', rotation=0)  # x축 레이블 가로 설정
adjust_xticks(ax[1], step=1)  # x축 레이블 간격 조정

# 2023년 그래프
df_2023.plot(kind='bar', y=f'Ratio_2023', ax=ax[2], color='salmon', legend=False)
ax[2].set_title("2023 hospital / population", fontsize=14)
ax[2].set_xlabel("Province", fontsize=12)
ax[2].set_ylabel("Hospital to Population Ratio", fontsize=12)
ax[2].tick_params(axis='x', rotation=0)  # x축 레이블 가로 설정
adjust_xticks(ax[2], step=1)  # x축 레이블 간격 조정

# 그래프 간 간격 조정
plt.tight_layout()

# 그래프 출력
plt.show()

# -- 개설일자별 그래프 그리기

# 병원 정보 데이터 (최신 2023년 기준으로 잡음)
df_hospital = pd.read_csv("/content/1.병원정보서비스.csv", encoding="cp949")

# 개설일자(n열: 인덱스 기준 13번 열)에서 연도 추출
df_hospital['개설일자'] = df_hospital.iloc[:, 13].astype(str).str[:4].astype(int)  # 연도 추출

# 연도별 항목 나누기
def group_years(year):
    if year <= 1959:
        return "1900-1959"
    elif 1960 <= year <= 1965:
        return "1960-1965"
    elif 1966 <= year <= 1970:
        return "1966-1970"
    elif 1971 <= year <= 1975:
        return "1971-1975"
    elif 1976 <= year <= 1980:
        return "1976-1980"
    elif 1981 <= year <= 1985:
        return "1981-1985"
    elif 1986 <= year <= 1990:
        return "1986-1990"
    elif 1991 <= year <= 1995:
        return "1991-1995"
    elif 1996 <= year <= 2000:
        return "1996-2000"
    elif 2001 <= year <= 2005:
        return "2001-2005"
    elif 2006 <= year <= 2010:
        return "2006-2010"
    elif 2011 <= year <= 2015:
        return "2011-2015"
    elif 2016 <= year <= 2020:
        return "2016-2020"
    else:
        return "2021-2023"

# 그룹화 적용
df_hospital['GroupedYears'] = df_hospital['개설일자'].apply(group_years)

# 그룹별 병원 수 계산
grouped_counts = df_hospital['GroupedYears'].value_counts().sort_index()

# 그래프 생성
plt.figure(figsize=(12, 8))
grouped_counts.plot(kind='bar', color='skyblue', edgecolor='black')
plt.title('Hospitals Opened by Year Group', fontsize=16)
plt.xlabel('Year Group', fontsize=14)
plt.ylabel('Number of Hospitals', fontsize=14)
plt.xticks(rotation=45, fontsize=12)
plt.yticks(fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()
